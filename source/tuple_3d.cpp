//------------------------------------------------------------------------------
//	File:					tuple_3d.cp
//	Date:					8/26/94
//	Author:				Bretton Wade
//
//	Description:	this file contains the methods for a tuple_3d
//
//------------------------------------------------------------------------------

#include "precompile.h"
#include "utility.h"
#include "tuple_3d.h"

//------------------------------------------------------------------------------
//	constructor
//------------------------------------------------------------------------------
tuple_3d::tuple_3d(const tuple_3d &t)
{
	xyz[X] = t[x];
	xyz[Y] = t[y];
	xyz[Z] = t[z];
	xyz[W] = t[w];
}
//------------------------------------------------------------------------------
//	constructor
//------------------------------------------------------------------------------
tuple_3d::tuple(real x, real y, real z, real w)
{
	xyz[X] = x;
	xyz[Y] = y;
	xyz[Z] = z;
	xyz[W] = w;
}
//------------------------------------------------------------------------------
//	assignment operator
//------------------------------------------------------------------------------
void tuple_3d::operator = (const tuple_3d &t)
{
	xyz[X] = t[X];
	xyz[Y] = t[Y];
	xyz[Z] = t[Z];
	xyz[W] = t[W];
}
//------------------------------------------------------------------------------
//	equality
//------------------------------------------------------------------------------
bool tuple_3d::operator == (const tuple_3d &t) const
{
	return bool((abs(xyz[X] - t[X]) < 0) && 
		(abs(xyz[Y] - t[Y]) < 0) &&
		(abs(xyz[Z] - t[Z]) < 0) &&
		(abs(xyz[W] - t[W]) < 0));	
}
//------------------------------------------------------------------------------
//	inequality
//------------------------------------------------------------------------------
bool tuple_3d::operator != (const tuple_3d &t) const
{
	return bool((abs(xyz[X] - t[X]) < 0) || 
		(abs(xyz[Y] - t[Y]) < 0) ||
		(abs(xyz[Z] - t[Z]) < 0) ||
		(abs(xyz[W] - t[W]) < 0));	
}
//------------------------------------------------------------------------------
//	assignment
//------------------------------------------------------------------------------
void tuple_3d::operator () (real x, real y, real z, real w)
{
	xyz[X] = x;
	xyz[Y] = y;
	xyz[Z] = z;
	xyz[W] = w;
}
//------------------------------------------------------------------------------
//	dot product
//------------------------------------------------------------------------------
real tuple_3d::operator | (const tuple_3d &t) const
{
	return (xyz[X] * t[X])+(xyz[Y] * t[Y])+(xyz[Z] * t[Z])+(xyz[W] * t[W]);
}
//------------------------------------------------------------------------------
//	major axis
//------------------------------------------------------------------------------
coord tuple_3d::MajorAxis(void) const
{
	coord axis = X;
	if(abs(xyz[Y]) > abs(xyz[X]))
		axis = Y;
	if(abs(xyz[Z]) > abs(xyz[axis]))
		axis = Z;
	return axis;
}
coord tuple_3d::MinorAxis(void) const
{
	coord axis = X;
	if(abs(xyz[Y]) <= abs(xyz[X]))
		axis = Y;
	if(abs(xyz[Z]) <= abs(xyz[axis]))
		axis = Z;
	return axis;
}
//------------------------------------------------------------------------------
